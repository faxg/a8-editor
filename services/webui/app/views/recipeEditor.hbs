<div>
    <ul id="editor-tabs" class="nav nav-tabs" data-tabs="tabs">
        <li class="active"><a href="#tabGeneral" data-toggle="tab">General</a></li>
        <li class=""><a href="#tabTopology" data-toggle="tab">Topology</a></li>
        <li class=""><a href="#tabGremlins" data-toggle="tab">Gremlins</a></li>
        <li class=""><a href="#tabChecks" data-toggle="tab">Checks</a></li>
        <li class=""><a href="#tabSummary" data-toggle="tab">Summary</a></li>
    </ul>


    <div id="editor-tab-content" class="tab-content">

        <div class="tab-pane fade active in" id="tabGeneral">
            <div class="well">Describe your A8/Gremlin testing recipe. More info under...</div>
            <div class="panel panel-default">
                <div class="panel-body">
                    <form>
                        <div class="form-group">
                            <label for="inputName">Recipe Name</label>
                            <input type="text" class="form-control" id="inputName" data-bind="value: name" placeholder="Sample Gremlin recipe">
                            <small>id #<strong data-bind="text: sanitizedName"></strong></small>
                        </div>
                        <div class="form-group">
                            <label for="inputDescription">Short description</label>
                            <input type="text" class="form-control" id="inputDescription" data-bind="value: description" placeholder="Test basic SLAs">
                        </div>
                        <div class="form-group">
                            <button id="buttonNew" data-bind="click: loadFromTemplate" type="button" class="btn btn-primary">Load template...</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <!--<button id="buttonValidate" type="button" class="btn btn-primary">Validate</button>
        <button id="buttonDownload" type="button" class="btn btn-primary">Download</button>
        -->



        <div class="tab-pane fade in" id="tabTopology">
            <div class="well">Model your service topology for the test scenario.</div>
            <pre id="editorTopology" data-bind="ace: srcTopology" class="editorComponent"></pre>
        </div>
        <div class="tab-pane fade" id="tabChecks">
            <div class="well">Use this to model your checklist for your non-functional requirements like response times upper bounds, expected HTTP response codes etc.</div>
            <pre id="editorChecks" data-bind="ace: srcChecks" class="editorComponent"></pre>
        </div>
        <div class="tab-pane fade" id="tabGremlins">
            <div class="well">Model Gremlins, e.g. injected error conditions, such as sythetic timeouts, bad responses etc.</div>
            <pre id="editorGremlins" data-bind="ace: srcGremlins" class="editorComponent"></pre>
        </div>
        <div class="tab-pane fade" id="tabSummary">
            <div class="well">Download and run your recipe on your Amalgam8 / Gremlin setup.</div>
            <ol>
                <li>Download your recipe sources:<br/>
                    <button id="buttonDownload" data-bind="click: generateAndDownload" type="button" class="btn btn-primary">Download <span data-bind="text: sanitizedName"></span>.zip</button>
                </li>
                <li>Unzip <kbd>tar -zxvf <span data-bind="text: sanitizedName"></span>.zip</kbd>
                </li>
                <li>Run your recipe
                    <pre data-bind="text: cmdLine"></pre>
                </li>

            </ol>


        </div>
    </div>


</div>








<script>
    var topologyEditor = ace.edit('editorTopology');
    var checksEditor = ace.edit('editorChecks');
    var gremlinsEditor = ace.edit('editorGremlins');


    /**
     * Knockout.js view model
     */
    function RecipeViewModel() {
        var self = this;
        // Name of the recipe
        self.name = ko.observable("My Recipe");
        // santitized camel case version of name (for generating ids, filenames etc.)
        self.sanitizedName = ko.computed(function() {
            return self.name().toLowerCase()
                // Replaces any - or _ characters with a space 
                .replace(/[-_]+/g, ' ')
                // Removes any non alphanumeric characters 
                .replace(/[^\w\s]/g, '')
                // Uppercases the first character in each group immediately following a space 
                // (delimited by spaces) 
                .replace(/ (.)/g, function($1) {
                    return $1.toUpperCase();
                })
                // Removes spaces 
                .replace(/ /g, '');
        });

        // computed command line for a8ctl
        self.cmdLine = ko.computed(function() {
            return "a8ctl recipe-run --topology " + self.sanitizedName() + ".topology.json " +
                "--scenarios " + self.sanitizedName() + ".gremlins.json " +
                "--checks " + self.sanitizedName() + ".checks.json " +
                "--header 'Cookie' " +
                "--pattern='user=jason' ";
        });
        // short description.
        self.description = ko.observable("");
        // holds latest error message, e.g. parsing errors
        self.errorMessage = ko.observable("");
        // observables for ace editors / source code
        self.srcTopology = ko.observable("");
        self.srcGremlins = ko.observable("");
        self.srcChecks = ko.observable("");
        // call package & download 
        self.generateAndDownload = function() {
            var zip = new JSZip();
            zip.file(self.sanitizedName() + ".topology.json", self.srcTopology());
            zip.file(self.sanitizedName() + ".checks.json", self.srcChecks());
            zip.file(self.sanitizedName() + ".gremlins.json", self.srcGremlins());
            zip.file("start-recipe-" + self.sanitizedName() + ".sh", "#!/bin/sh\n#" + self.description() + "\n" + +self.cmdLine(), {
                "unixPermissions": 0755
            });

            zip.generateAsync({
                    type: "blob"
                })
                .then(function(content) {
                    saveAs(content, self.sanitizedName() + ".zip");
                });
        };
        // handler function to populate source editors from some (static) templates
        self.loadFromTemplate = function() {
            $.getJSON("/templates/sample.topology.json", function(data) {
                self.srcTopology(JSON.stringify(data, null, 2));
                topologyEditor.resize();
            });
            $.getJSON("/templates/sample.gremlins.json", function(data) {
                self.srcGremlins(JSON.stringify(data, null, 2));
                gremlinsEditor.resize();
            });
            $.getJSON("/templates/sample.checklist.json", function(data) {
                self.srcChecks(JSON.stringify(data, null, 2));
                checksEditor.resize();
            });
        }

    }
    var viewModel = new RecipeViewModel();
    ko.applyBindings(viewModel);


    /** initialize all editors */
    var editor;
    $('.editorComponent').each(function(index) {
        editor = ace.edit(this);
        editor.getSession().setMode('ace/mode/json');
        editor.setTheme("ace/theme/github");
        editor.setShowPrintMargin(false);
        editor.setHighlightActiveLine(true);
        editor.setBehavioursEnabled(true);
        editor.$blockScrolling = Infinity;
        editor.session.getUndoManager().reset();
        editor.resize();

    });








    topologyEditor.getSession().on('change', function(e) {
        try {
            viewModel.errorMessage(""); // clear error message

            var txt = topologyEditor.getSession().getValue();
            var srcObj = JSON.parse(txt);
            var data = JSON.stringify(srcObj, null, 2);

            if (data) {
                //console.log('Refreshing dependency visualization..', data);
                $('#dependencyViewIFrame').attr('src', "{{ services.topologyService }}/dependencyView?data=" + data);
            }

        } catch (exception) {
            console.log(exception);
            // set error message
            viewModel.errorMessage(exception);
        }

    });
</script>