<div id="content">

    <span class="badge" style="background-color: #2ca02c;">Inbound</span> &nbsp;
    <span class="badge" style="background-color: #d62728;">Outbound</span>


    <!-- div hosting the dependency visualization -->
    <div id="dependencyGraph"></div>



    <script>
        /* Based on the "Hierarchical Edge Bundling Example" 
                 see https://bl.ocks.org/mbostock/7607999
                  */
        var diameter = 480,
            radius = diameter / 2,
            innerRadius = radius - 120;

        var cluster = d3.layout.cluster()
            .size([360, innerRadius])
            .sort(null)
            .value(function(d) {
                return d.size;
            });

        var bundle = d3.layout.bundle();

        var line = d3.svg.line.radial()
            .interpolate("bundle")
            .tension(.85)
            .radius(function(d) {
                return d.y;
            })
            .angle(function(d) {
                return d.x / 180 * Math.PI;
            });

        var svg = d3.select("#dependencyGraph")
            .append("svg")
            .attr("width", diameter) // todo 100%
            .attr("height", diameter)
            .attr("viewBox", "0 0 " + diameter + " " + diameter) // for responsive resizes
            .attr("preserveAspectRatio", "xMidYMid meet") // for responsive resizes
            .append("g")
            .attr("transform", "translate(" + radius + "," + radius + ")");

        var link = svg.append("g").selectAll(".link"),
            node = svg.append("g").selectAll(".node");

        // NOTE: data statically rendered into page
        var classes = {{{json viewModel}}};

        var nodes = cluster.nodes(packageHierarchy(classes)),
            links = packageImports(nodes);

        link = link
            .data(bundle(links))
            .enter().append("path")
            .each(function(d) {
                d.source = d[0], d.target = d[d.length - 1];
            })
            .attr("class", "link")
            .attr("d", line);

        node = node
            .data(nodes.filter(function(n) {
                return !n.children;
            }))
            .enter().append("text")
            .attr("class", "node")
            .attr("dy", ".31em")
            .attr("transform", function(d) {
                return "rotate(" + (d.x - 90) + ")translate(" + (d.y + 8) + ",0)" + (d.x < 180 ? "" : "rotate(180)");
            })
            .style("text-anchor", function(d) {
                return d.x < 180 ? "start" : "end";
            })
            .text(function(d) {
                return d.key;
            })
            .on("mouseover", mouseovered)
            .on("mouseout", mouseouted);


        function mouseovered(d) {
            node
                .each(function(n) {
                    n.target = n.source = false;
                });

            link
                .classed("link--target", function(l) {
                    if (l.target === d) return l.source.source = true;
                })
                .classed("link--source", function(l) {
                    if (l.source === d) return l.target.target = true;
                })
                .filter(function(l) {
                    return l.target === d || l.source === d;
                })
                .each(function() {
                    this.parentNode.appendChild(this);
                });

            node
                .classed("node--target", function(n) {
                    return n.target;
                })
                .classed("node--source", function(n) {
                    return n.source;
                });
        }

        function mouseouted(d) {
            link
                .classed("link--target", false)
                .classed("link--source", false);

            node
                .classed("node--target", false)
                .classed("node--source", false);
        }

        d3.select(self.frameElement).style("height", diameter + "px");

        // Lazily construct the package hierarchy 
        function packageHierarchy(classes) {
            var map = {};

            function find(name, data) {
                var node = map[name],
                    i;
                if (!node) {
                    node = map[name] = data || {
                        name: name,
                        children: []
                    };
                    if (name.length) {
                        node.parent = find(name.substring(0, i = name.lastIndexOf(".")));
                        node.parent.children.push(node);
                        node.key = name.substring(i + 1);
                    }
                }
                return node;
            }

            classes.forEach(function(d) {
                find(d.name, d);
            });

            return map[""];
        }

        // Return a list of imports for the given array of nodes.
        function packageImports(nodes) {
            var map = {},
                imports = [];

            // Compute a map from name to node.
            nodes.forEach(function(d) {
                map[d.name] = d;
            });

            // For each import, construct a link from the source to target node.
            nodes.forEach(function(d) {
                if (d.imports) d.imports.forEach(function(i) {
                    imports.push({
                        source: map[d.name],
                        target: map[i]
                    });
                });
            });

            return imports;
        }
    </script>

</div>