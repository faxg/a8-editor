const express = require('express');
const expect = require('chai').expect;

var fetch = require('node-fetch');

const a8etracer = require('../tracer');
const a8ebrowser = require('../browser');


// window.fetch Browser ==> Express Server

describe('trace browser (fetch) => server (express)', () => {
    it('should return zipkin tracing headers', done => {

        // create express server and add tracing middleware
        const app = express();
        a8etracer.instrumentExpress(app, 'server');

        // use instrumented browser/ui client
        fetch = a8ebrowser.instrumentBrowser(fetch, 'browser');
        //const rest = restUninistrumented;

        // mock server endpoint
        app.get('/api', (req, res) => {
            // we return the incoming trace headers as json payload for easy checking
            res.status(202).json({
                status: 'OK',
                traceId: req.header('X-B3-TraceId') || '?',
                spanId: req.header('X-B3-SpanId') || '?'
            });
        });

        // start server
        const server = app.listen(0, () => {
            const port = server.address().port;
            const url = `http://127.0.0.1:${port}/api`;

            // call (instrumented) server from (instrumented) client
            fetch(url)
                .then((response) => {
                    //console.log(response);
                    expect(response.status).to.equal(202);
                    return response.json();
                })
                .then((payload) => {

                    // check that traceId and spanId (generated by client) are 16 digit hex
                    expect(payload.traceId).to.match(/^[a-f0-9]{16}$/);
                    expect(payload.traceId).to.match(/^[a-f0-9]{16}$/);

                    server.close();
                    done();
                })
                .catch(err => {
                    server.close();
                    done(err);
                });

        });
    });

});